// Code generated by "weaver generate". DO NOT EDIT.
//go:build !ignoreWeaverGen

package services

import (
	"context"
	"errors"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:  "socialnetwork/services/ComposePost",
		Iface: reflect.TypeOf((*ComposePost)(nil)).Elem(),
		Impl:  reflect.TypeOf(composePost{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return composePost_local_stub{impl: impl.(ComposePost), tracer: tracer, composeAndUploadMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "socialnetwork/services/ComposePost", Method: "ComposeAndUpload", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return composePost_client_stub{stub: stub, composeAndUploadMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "socialnetwork/services/ComposePost", Method: "ComposeAndUpload", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return composePost_server_stub{impl: impl.(ComposePost), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return composePost_reflect_stub{caller: caller}
		},
		RefData: "⟦d08a90ef:wEaVeReDgE:socialnetwork/services/ComposePost→socialnetwork/services/PostStorage⟧\n",
	})
	codegen.Register(codegen.Registration{
		Name:  "socialnetwork/services/PostStorage",
		Iface: reflect.TypeOf((*PostStorage)(nil)).Elem(),
		Impl:  reflect.TypeOf(postStorage{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return postStorage_local_stub{impl: impl.(PostStorage), tracer: tracer, storePostMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "socialnetwork/services/PostStorage", Method: "StorePost", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return postStorage_client_stub{stub: stub, storePostMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "socialnetwork/services/PostStorage", Method: "StorePost", Remote: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return postStorage_server_stub{impl: impl.(PostStorage), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return postStorage_reflect_stub{caller: caller}
		},
		RefData: "",
	})
	codegen.Register(codegen.Registration{
		Name:  "socialnetwork/services/WriteHomeTimeline",
		Iface: reflect.TypeOf((*WriteHomeTimeline)(nil)).Elem(),
		Impl:  reflect.TypeOf(writeHomeTimeline{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return writeHomeTimeline_local_stub{impl: impl.(WriteHomeTimeline), tracer: tracer}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any { return writeHomeTimeline_client_stub{stub: stub} },
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return writeHomeTimeline_server_stub{impl: impl.(WriteHomeTimeline), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return writeHomeTimeline_reflect_stub{caller: caller}
		},
		RefData: "",
	})
}

// weaver.InstanceOf checks.
var _ weaver.InstanceOf[ComposePost] = (*composePost)(nil)
var _ weaver.InstanceOf[PostStorage] = (*postStorage)(nil)
var _ weaver.InstanceOf[WriteHomeTimeline] = (*writeHomeTimeline)(nil)

// weaver.Router checks.
var _ weaver.Unrouted = (*composePost)(nil)
var _ weaver.Unrouted = (*postStorage)(nil)
var _ weaver.Unrouted = (*writeHomeTimeline)(nil)

// Local stub implementations.

type composePost_local_stub struct {
	impl                    ComposePost
	tracer                  trace.Tracer
	composeAndUploadMetrics *codegen.MethodMetrics
}

// Check that composePost_local_stub implements the ComposePost interface.
var _ ComposePost = (*composePost_local_stub)(nil)

func (s composePost_local_stub) ComposeAndUpload(ctx context.Context, a0 string) (err error) {
	// Update metrics.
	begin := s.composeAndUploadMetrics.Begin()
	defer func() { s.composeAndUploadMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.ComposePost.ComposeAndUpload", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.ComposeAndUpload(ctx, a0)
}

type postStorage_local_stub struct {
	impl             PostStorage
	tracer           trace.Tracer
	storePostMetrics *codegen.MethodMetrics
}

// Check that postStorage_local_stub implements the PostStorage interface.
var _ PostStorage = (*postStorage_local_stub)(nil)

func (s postStorage_local_stub) StorePost(ctx context.Context, a0 string, a1 int64) (err error) {
	// Update metrics.
	begin := s.storePostMetrics.Begin()
	defer func() { s.storePostMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "services.PostStorage.StorePost", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.StorePost(ctx, a0, a1)
}

type writeHomeTimeline_local_stub struct {
	impl   WriteHomeTimeline
	tracer trace.Tracer
}

// Check that writeHomeTimeline_local_stub implements the WriteHomeTimeline interface.
var _ WriteHomeTimeline = (*writeHomeTimeline_local_stub)(nil)

// Client stub implementations.

type composePost_client_stub struct {
	stub                    codegen.Stub
	composeAndUploadMetrics *codegen.MethodMetrics
}

// Check that composePost_client_stub implements the ComposePost interface.
var _ ComposePost = (*composePost_client_stub)(nil)

func (s composePost_client_stub) ComposeAndUpload(ctx context.Context, a0 string) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.composeAndUploadMetrics.Begin()
	defer func() { s.composeAndUploadMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.ComposePost.ComposeAndUpload", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

type postStorage_client_stub struct {
	stub             codegen.Stub
	storePostMetrics *codegen.MethodMetrics
}

// Check that postStorage_client_stub implements the PostStorage interface.
var _ PostStorage = (*postStorage_client_stub)(nil)

func (s postStorage_client_stub) StorePost(ctx context.Context, a0 string, a1 int64) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.storePostMetrics.Begin()
	defer func() { s.storePostMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "services.PostStorage.StorePost", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	size += 8
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	enc.Int64(a1)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

type writeHomeTimeline_client_stub struct {
	stub codegen.Stub
}

// Check that writeHomeTimeline_client_stub implements the WriteHomeTimeline interface.
var _ WriteHomeTimeline = (*writeHomeTimeline_client_stub)(nil)

// Note that "weaver generate" will always generate the error message below.
// Everything is okay. The error message is only relevant if you see it when
// you run "go build" or "go run".
var _ codegen.LatestVersion = codegen.Version[[0][20]struct{}](`

ERROR: You generated this file with 'weaver generate' v0.22.0 (codegen
version v0.20.0). The generated code is incompatible with the version of the
github.com/ServiceWeaver/weaver module that you're using. The weaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/ServiceWeaver/weaver

We recommend updating the weaver module and the 'weaver generate' command by
running the following.

    go get github.com/ServiceWeaver/weaver@latest
    go install github.com/ServiceWeaver/weaver/cmd/weaver@latest

Then, re-run 'weaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/ServiceWeaver/weaver/issues.

`)

// Server stub implementations.

type composePost_server_stub struct {
	impl    ComposePost
	addLoad func(key uint64, load float64)
}

// Check that composePost_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*composePost_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s composePost_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "ComposeAndUpload":
		return s.composeAndUpload
	default:
		return nil
	}
}

func (s composePost_server_stub) composeAndUpload(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.ComposeAndUpload(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

type postStorage_server_stub struct {
	impl    PostStorage
	addLoad func(key uint64, load float64)
}

// Check that postStorage_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*postStorage_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s postStorage_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "StorePost":
		return s.storePost
	default:
		return nil
	}
}

func (s postStorage_server_stub) storePost(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()
	var a1 int64
	a1 = dec.Int64()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.StorePost(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

type writeHomeTimeline_server_stub struct {
	impl    WriteHomeTimeline
	addLoad func(key uint64, load float64)
}

// Check that writeHomeTimeline_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*writeHomeTimeline_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s writeHomeTimeline_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	default:
		return nil
	}
}

// Reflect stub implementations.

type composePost_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that composePost_reflect_stub implements the ComposePost interface.
var _ ComposePost = (*composePost_reflect_stub)(nil)

func (s composePost_reflect_stub) ComposeAndUpload(ctx context.Context, a0 string) (err error) {
	err = s.caller("ComposeAndUpload", ctx, []any{a0}, []any{})
	return
}

type postStorage_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that postStorage_reflect_stub implements the PostStorage interface.
var _ PostStorage = (*postStorage_reflect_stub)(nil)

func (s postStorage_reflect_stub) StorePost(ctx context.Context, a0 string, a1 int64) (err error) {
	err = s.caller("StorePost", ctx, []any{a0, a1}, []any{})
	return
}

type writeHomeTimeline_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that writeHomeTimeline_reflect_stub implements the WriteHomeTimeline interface.
var _ WriteHomeTimeline = (*writeHomeTimeline_reflect_stub)(nil)

