---
- hosts: swarm_manager
  gather_facts: no
  any_errors_fatal: true
  vars_files: vars.yml
  tasks:
    - name: Check if swarm is already initialized
      shell: sudo docker node ls
      register: swarm_status
      failed_when: "not(swarm_status.rc == 0 or 'This node is not a swarm manager.' in swarm_status.stderr)"

    - name: Init swarm manager
      shell: sudo docker swarm init --advertise-addr {{ hostvars[inventory_hostname]['ansible_host'] }}:{{ swarm_advertise_port }}
    
    - name: Create swarm network
      shell: sudo docker network create --attachable -d overlay deathstarbench_network

    - name: Get swarm manager token
      shell: sudo docker swarm join-token --quiet worker
      register: token

    # ansible does not allow using shell and set_fact in the same task
    # so we create a new task to save it as a new variable for the swarm manager
    - name: Save swarm manager token
      set_fact:
        token: "{{ token['stdout'] }}"


- hosts: swarm_workers
  gather_facts: no
  any_errors_fatal: true
  vars_files: vars.yml
  tasks:
    - name: Add workers to swarm
      shell: >
        sudo docker swarm join \
        --token {{ hostvars[hostvars[inventory_hostname]['groups']['swarm_manager'][0]]['token'] }} \
        --advertise-addr {{ hostvars[inventory_hostname]['ansible_host'] }} \
        {{ hostvars[hostvars[inventory_hostname]['groups']['swarm_manager'][0]]['ansible_host'] }}:{{ swarm_advertise_port }}

- hosts: swarm_manager
  gather_facts: no
  any_errors_fatal: true
  vars_files: vars.yml
  tasks:
    - name: Deploy stack
      shell: sudo docker stack deploy --with-registry-auth --compose-file ~/{{ app_folder_name }}/docker-compose.yml socialnetwork
  
    - name: Check that all workers join the swarm and are ready
      # command format:
      # sudo docker node ls --format '{{.Hostname}}: {{.Status}}' | grep 'Ready' | wc -l
      shell: >
        sudo docker node ls --format {% raw %}'{{.Hostname}}{% endraw %}: {% raw %}{{.Status}}'{% endraw %} | grep 'Ready' | wc -l
      register: num_nodes
      retries: 5
      delay: 10
      until: (num_nodes.stdout | int) == num_swarm_nodes

    - name: Check that all swarm services are replicated
      # command format:
      # sudo docker stack services <swarm_stack> --format '{{.Name}}: {{.Replicas}}' | grep '1/1' | wc -l
      shell: >
        sudo docker stack services socialnetwork --format {% raw %}'{{.Name}}: {{.Replicas}}'{% endraw %} | grep '1/1' | wc -l
      register: num_services
      retries: 5
      delay: 10
      until: (num_services.stdout | int) == num_swarm_services

    
